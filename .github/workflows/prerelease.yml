name: Create Pre-release

on:
  workflow_dispatch:
    inputs:
      hash:
        description: 'Commit hash to release'
        required: false
        default: ''
      bump:
        description: 'Choose your version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      tag:
        description: 'Type of pre-release'
        required: true
        default: 'rc'
        type: choice
        options:
          - rc

env:
  BRANCH_NAME: ${{ github.ref_name }}
  GH_TOKEN: ${{ secrets.GH_AUTH_TOKEN }}

jobs:
  run-build-on-bitrise:
    name: Pre-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          token: ${{ env.GH_TOKEN }}

      - name: Check existing release branch
        run: |
          if git ls-remote --heads origin release/* | grep -q 'release/'; then
            echo "There is an active release branch, you can't create a new release."
            exit 1
          fi

      - name: Specific Commit
        if: ${{ github.event.inputs.hash != '' }}
        run: |
          git reset --hard ${{ github.event.inputs.hash }}

      - name: Check "develop" branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" != "develop" ]; then
            echo "Branch name is not develop"
            exit 1
          fi

      - name: Install libraries and run linters and unit tests
        run: |
          yarn install
          yarn typecheck
          yarn lint
          yarn test:unit

      - name: Setup Git
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global --add --bool push.autoSetupRemote true

          current_version=$(jq -r '.version' package.json)

          IFS='.' read -ra version_parts <<< "$current_version"

          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          bump=${{ inputs.bump }}

          if [ "$bump" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$bump" == "patch" ]; then
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"

          echo "BUILD_BRANCH_NAME=release/$new_version" >> "$GITHUB_OUTPUT"

          git checkout -b "release/$new_version"

          updated_json=$(jq --arg current_version "$current_version" '.plugins."@release-it/conventional-changelog".gitRawCommitsOpts.from = $current_version | .plugins."@release-it/conventional-changelog".context.previousTag = $current_version' .release-it.release.json)
          echo "$updated_json" > .release-it.release.json

          git add .
          git commit -m "chore: update .release-it.release.json for previous tag $current_version"

      - name: Bump version
        run: |
          yarn release ${{ inputs.bump }} --preRelease=${{ inputs.tag }} --config .release-it.pre.json --ci

      - name: Bitrise Build Production
        run: |
          echo "Triggering Bitrise build for production"
          echo "GitHub SHA ${{ github.sha }}"
          echo "GitHub Branch ${{ env.BRANCH_NAME }}"
          echo "Real branch ${{ env.BUILD_BRANCH_NAME }}"
          echo "Real Hash " git rev-parse ${{ env.BUILD_BRANCH_NAME }}
